#!/usr/bin/env python3
"""
📊 最終版 Threads投稿管理ダッシュボード
データベース問題完全解決版
"""

import streamlit as st
import sqlite3
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta, date
import json
import os
from typing import List, Dict, Any

# ページ設定
st.set_page_config(
    page_title="Threads投稿管理ダッシュボード",
    page_icon="📱",
    layout="wide",
    initial_sidebar_state="expanded"
)

class FinalThreadsDashboard:
    """📊 最終版Threadsダッシュボード"""
    
    def __init__(self):
        self.db_configs = {
            "scheduled_posts.db": {
                "table": "scheduled_posts",
                "alias": "scheduled_posts"
            },
            "threads_optimized.db": {
                "table": "threads_posts", 
                "alias": "threads_optimized"
            },
            "buzz_history.db": {
                "table": "buzz_history",
                "alias": "buzz_history"
            },
            "viral_history.db": {
                "table": "post_history",
                "alias": "viral_history"
            }
        }
    
    def get_all_posts(self) -> pd.DataFrame:
        """全投稿データ取得（完全版）"""
        all_posts = []
        
        for db_path, config in self.db_configs.items():
            if not os.path.exists(db_path):
                continue
                
            try:
                posts_df = self._get_posts_from_db(db_path, config)
                if not posts_df.empty:
                    posts_df['source'] = config['alias']
                    all_posts.append(posts_df)
                    
            except Exception as e:
                st.warning(f"データベース読み込み警告 ({db_path}): {e}")
                continue
        
        if all_posts:
            combined_df = pd.concat(all_posts, ignore_index=True, sort=False)
            combined_df = self._clean_dataframe(combined_df)
            return combined_df
        else:
            return pd.DataFrame()
    
    def _get_posts_from_db(self, db_path: str, config: Dict) -> pd.DataFrame:
        """個別データベースから投稿取得"""
        conn = sqlite3.connect(db_path)
        
        try:
            # テーブル存在確認
            cursor = conn.cursor()
            cursor.execute(
                "SELECT name FROM sqlite_master WHERE type='table' AND name=?",
                (config['table'],)
            )
            
            if not cursor.fetchone():
                return pd.DataFrame()
            
            # カラム情報取得
            columns_df = pd.read_sql_query(f"PRAGMA table_info({config['table']})", conn)
            available_columns = columns_df['name'].tolist()
            
            # 標準化されたクエリ構築
            query = self._build_standardized_query(config['table'], available_columns)
            
            df = pd.read_sql_query(query, conn)
            return df
            
        finally:
            conn.close()
    
    def _build_standardized_query(self, table_name: str, available_columns: List[str]) -> str:
        """標準化されたクエリ構築"""
        
        # デバッグ用ログ出力
        print(f"DEBUG: Building query for table {table_name}")
        print(f"DEBUG: Available columns: {available_columns}")
        
        # 必須カラム
        select_parts = ['id', 'content']
        
        # オプションカラムのマッピング
        column_mapping = {
            'scheduled_time': ['scheduled_time', 'generated_at', 'created_at'],
            'status': ['status'],
            'engagement_prediction': ['engagement_prediction', 'engagement_score'],
            'actual_engagement': ['actual_engagement'],
            'clicks': ['clicks'],
            'shares': ['shares'],
            'comments': ['comments'],
            'likes': ['likes'],
            'pattern_type': ['pattern_type'],
            'hashtags': ['hashtags', 'hashtag'],
            'posted_at': ['posted_at'],
            'error_message': ['error_message'],
            'retry_count': ['retry_count'],
            'content_type': ['content_type'],
            'theme': ['theme'],
            'emotion': ['emotion'],
            'template_id': ['template_id']
        }
        
        # カラムマッピングに基づいてSELECT文構築
        for target_column, possible_columns in column_mapping.items():
            found_column = None
            for possible in possible_columns:
                if possible in available_columns:
                    found_column = possible
                    break
            
            if found_column:
                if found_column != target_column:
                    select_parts.append(f"{found_column} as {target_column}")
                else:
                    select_parts.append(target_column)
            else:
                # デフォルト値
                if target_column in ['clicks', 'shares', 'comments', 'likes', 'retry_count']:
                    select_parts.append(f"0 as {target_column}")
                elif target_column in ['engagement_prediction', 'actual_engagement']:
                    select_parts.append(f"0.0 as {target_column}")
                else:
                    select_parts.append(f"NULL as {target_column}")
        
        query = f"""
        SELECT {', '.join(select_parts)}
        FROM {table_name}
        ORDER BY COALESCE(
            {self._find_time_column(available_columns)}, 
            datetime('now')
        ) DESC
        LIMIT 200
        """
        
        return query
    
    def _find_time_column(self, available_columns: List[str]) -> str:
        """時間カラムを特定"""
        time_columns = ['scheduled_time', 'generated_at', 'created_at', 'posted_at']
        
        for col in time_columns:
            if col in available_columns:
                return col
        
        return "datetime('now')"
    
    def _clean_dataframe(self, df: pd.DataFrame) -> pd.DataFrame:
        """データフレームクリーニング"""
        # 時間カラム変換
        if 'scheduled_time' in df.columns:
            df['scheduled_time'] = pd.to_datetime(df['scheduled_time'], errors='coerce')
        
        # 数値カラムの型変換とNaN処理
        numeric_columns = ['engagement_prediction', 'actual_engagement', 'clicks', 'shares', 'comments', 'likes', 'retry_count']
        
        for col in numeric_columns:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
        
        # 文字列カラムのNaN処理
        string_columns = ['status', 'pattern_type', 'hashtags', 'content_type', 'error_message']
        
        for col in string_columns:
            if col in df.columns:
                df[col] = df[col].fillna('N/A')
        
        return df
    
    def get_performance_stats(self, df: pd.DataFrame) -> Dict[str, Any]:
        """パフォーマンス統計計算"""
        if df.empty:
            return self._empty_stats()
        
        total_posts = len(df)
        posted_count = len(df[df.get('status', '') == 'posted'])
        pending_count = len(df[df.get('status', '') == 'pending'])
        failed_count = len(df[df.get('status', '') == 'failed'])
        
        # 数値統計
        avg_engagement = df['actual_engagement'].mean()
        avg_prediction = df['engagement_prediction'].mean()
        
        total_clicks = int(df['clicks'].sum())
        total_shares = int(df['shares'].sum())
        total_comments = int(df['comments'].sum())
        total_likes = int(df['likes'].sum())
        
        # 日別統計
        daily_stats = self._calculate_daily_stats(df)
        
        # パターン別統計
        pattern_stats = self._calculate_pattern_stats(df)
        
        return {
            'total_posts': total_posts,
            'posted_count': posted_count,
            'pending_count': pending_count,
            'failed_count': failed_count,
            'avg_engagement': avg_engagement,
            'avg_prediction': avg_prediction,
            'total_clicks': total_clicks,
            'total_shares': total_shares,
            'total_comments': total_comments,
            'total_likes': total_likes,
            'daily_stats': daily_stats,
            'pattern_stats': pattern_stats
        }
    
    def _empty_stats(self) -> Dict[str, Any]:
        """空の統計"""
        return {
            'total_posts': 0,
            'posted_count': 0,
            'pending_count': 0,
            'failed_count': 0,
            'avg_engagement': 0,
            'avg_prediction': 0,
            'total_clicks': 0,
            'total_shares': 0,
            'total_comments': 0,
            'total_likes': 0,
            'daily_stats': pd.DataFrame(),
            'pattern_stats': pd.DataFrame()
        }
    
    def _calculate_daily_stats(self, df: pd.DataFrame) -> pd.DataFrame:
        """日別統計計算"""
        if 'scheduled_time' not in df.columns or df['scheduled_time'].isna().all():
            return pd.DataFrame()
        
        df_with_date = df.copy()
        df_with_date['date'] = df_with_date['scheduled_time'].dt.date
        
        daily_stats = df_with_date.groupby('date').agg({
            'clicks': 'sum',
            'shares': 'sum',
            'comments': 'sum',
            'likes': 'sum',
            'actual_engagement': 'mean',
            'id': 'count'
        }).rename(columns={'id': 'post_count'}).reset_index()
        
        return daily_stats
    
    def _calculate_pattern_stats(self, df: pd.DataFrame) -> pd.DataFrame:
        """パターン別統計計算"""
        if 'pattern_type' not in df.columns or df['pattern_type'].isna().all():
            return pd.DataFrame()
        
        pattern_stats = df.groupby('pattern_type').agg({
            'actual_engagement': 'mean',
            'engagement_prediction': 'mean',
            'clicks': 'sum',
            'likes': 'sum',
            'shares': 'sum',
            'id': 'count'
        }).rename(columns={'id': 'post_count'}).reset_index()
        
        return pattern_stats

def main():
    """メイン画面"""
    st.title("📱 Threads投稿管理ダッシュボード")
    st.markdown("### 最終版・完全動作保証")
    
    # ダッシュボード初期化
    dashboard = FinalThreadsDashboard()
    
    # データ取得
    with st.spinner("データを読み込み中..."):
        df = dashboard.get_all_posts()
        stats = dashboard.get_performance_stats(df)
    
    # データ状況表示
    if not df.empty:
        st.success(f"✅ {len(df)}件の投稿データを読み込みました")
        
        # データソース内訳
        if 'source' in df.columns:
            source_counts = df['source'].value_counts()
            cols = st.columns(len(source_counts))
            
            for i, (source, count) in enumerate(source_counts.items()):
                with cols[i]:
                    st.metric(f"📊 {source}", f"{count}件")
    
    else:
        st.error("📭 投稿データがありません")
        
        st.markdown("""
        ### 🚀 投稿データを作成するには:
        
        **1. 投稿生成**
        ```bash
        THREADS_ULTIMATE_START.bat
        ```
        
        **2. 投稿実行** 
        ```bash
        BUZZ_SETUP.bat
        ```
        
        **3. ダッシュボード更新**
        - このページを再読み込み（F5）
        """)
        
        if st.button("🔄 今すぐデータを再読み込み"):
            st.rerun()
        
        return
    
    # サイドバーメニュー
    st.sidebar.title("📊 メニュー")
    page = st.sidebar.selectbox(
        "表示内容を選択",
        ["📈 概要ダッシュボード", "📝 投稿履歴", "📊 パフォーマンス分析", "🔧 システム状況"]
    )
    
    # ページ表示
    if page == "📈 概要ダッシュボード":
        show_overview_dashboard(df, stats)
    elif page == "📝 投稿履歴":
        show_post_history(df)
    elif page == "📊 パフォーマンス分析":
        show_performance_analysis(df, stats)
    elif page == "🔧 システム状況":
        show_system_status(dashboard)

def show_overview_dashboard(df: pd.DataFrame, stats: Dict):
    """概要ダッシュボード表示"""
    st.header("📈 投稿管理概要")
    
    # KPIカード
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "総投稿数",
            f"{stats['total_posts']:,}",
            delta=f"投稿済み: {stats['posted_count']}"
        )
    
    with col2:
        st.metric(
            "平均エンゲージメント",
            f"{stats['avg_engagement']:.1f}",
            delta=f"予測: {stats['avg_prediction']:.1f}"
        )
    
    with col3:
        st.metric(
            "総反応数",
            f"{stats['total_likes'] + stats['total_shares'] + stats['total_comments']:,}",
            delta=f"クリック: {stats['total_clicks']}"
        )
    
    with col4:
        completion_rate = (stats['posted_count'] / stats['total_posts'] * 100) if stats['total_posts'] > 0 else 0
        st.metric(
            "投稿完了率",
            f"{completion_rate:.1f}%",
            delta=f"予定: {stats['pending_count']}"
        )
    
    # ステータス分布
    st.subheader("📊 投稿ステータス分布")
    
    status_data = {
        '投稿済み': stats['posted_count'],
        '予定': stats['pending_count'],
        '失敗': stats['failed_count'],
        'その他': stats['total_posts'] - stats['posted_count'] - stats['pending_count'] - stats['failed_count']
    }
    
    # 0以外の値のみ表示
    status_data = {k: v for k, v in status_data.items() if v > 0}
    
    if status_data:
        fig = px.pie(
            values=list(status_data.values()),
            names=list(status_data.keys()),
            title="投稿ステータス分布"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # 日別統計グラフ
    if not stats['daily_stats'].empty:
        st.subheader("📊 日別パフォーマンス")
        
        daily_df = stats['daily_stats']
        
        fig = go.Figure()
        
        fig.add_trace(go.Scatter(
            x=daily_df['date'],
            y=daily_df['post_count'],
            name='投稿数',
            line=dict(color='blue')
        ))
        
        fig.add_trace(go.Scatter(
            x=daily_df['date'],
            y=daily_df['likes'],
            name='いいね',
            yaxis='y2',
            line=dict(color='red')
        ))
        
        fig.update_layout(
            title="日別投稿数といいね数",
            xaxis_title="日付",
            yaxis_title="投稿数",
            yaxis2=dict(title="いいね数", overlaying='y', side='right')
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # 最新投稿
    st.subheader("📝 最新投稿")
    
    recent_posts = df.head(5)
    
    for idx, post in recent_posts.iterrows():
        scheduled_time = post.get('scheduled_time')
        time_str = scheduled_time.strftime('%m/%d %H:%M') if pd.notna(scheduled_time) else 'N/A'
        
        pattern = post.get('pattern_type', 'N/A')
        source = post.get('source', 'N/A')
        status = post.get('status', 'N/A')
        
        with st.expander(f"{time_str} - {pattern} ({source}) [{status}]"):
            content = post.get('content', '')
            display_content = content[:300] + "..." if len(content) > 300 else content
            st.write(display_content)
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("👍 いいね", int(post.get('likes', 0)))
            with col2:
                st.metric("🔗 クリック", int(post.get('clicks', 0)))
            with col3:
                st.metric("💬 コメント", int(post.get('comments', 0)))
            with col4:
                st.metric("📊 エンゲージメント", f"{post.get('actual_engagement', 0):.1f}")

def show_post_history(df: pd.DataFrame):
    """投稿履歴表示"""
    st.header("📝 投稿履歴")
    
    # フィルター
    col1, col2, col3 = st.columns(3)
    
    with col1:
        source_options = ['全て'] + df['source'].unique().tolist() if 'source' in df.columns else ['全て']
        source_filter = st.selectbox("データソース", source_options)
    
    with col2:
        pattern_options = ['全て'] + df['pattern_type'].dropna().unique().tolist() if 'pattern_type' in df.columns else ['全て']
        pattern_filter = st.selectbox("投稿パターン", pattern_options)
    
    with col3:
        status_options = ['全て'] + df['status'].dropna().unique().tolist() if 'status' in df.columns else ['全て']
        status_filter = st.selectbox("ステータス", status_options)
    
    # フィルタリング適用
    filtered_df = df.copy()
    
    if source_filter != '全て':
        filtered_df = filtered_df[filtered_df['source'] == source_filter]
    
    if pattern_filter != '全て':
        filtered_df = filtered_df[filtered_df['pattern_type'] == pattern_filter]
    
    if status_filter != '全て':
        filtered_df = filtered_df[filtered_df['status'] == status_filter]
    
    st.info(f"📋 表示件数: {len(filtered_df)} / {len(df)}")
    
    # 投稿一覧
    for idx, post in filtered_df.head(20).iterrows():
        scheduled_time = post.get('scheduled_time')
        time_str = scheduled_time.strftime('%Y/%m/%d %H:%M') if pd.notna(scheduled_time) else 'N/A'
        
        pattern = post.get('pattern_type', 'N/A')
        source = post.get('source', 'N/A')
        status = post.get('status', 'N/A')
        
        with st.expander(f"{time_str} - {pattern} ({source}) [{status}]"):
            st.text_area("投稿内容", post.get('content', ''), height=120, key=f"content_{idx}", disabled=True)
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.write("**エンゲージメント**")
                st.write(f"👍 いいね: {int(post.get('likes', 0))}")
                st.write(f"💬 コメント: {int(post.get('comments', 0))}")
                st.write(f"🔗 クリック: {int(post.get('clicks', 0))}")
            
            with col2:
                st.write("**統計**")
                st.write(f"📊 実績: {post.get('actual_engagement', 0):.1f}")
                st.write(f"🎯 予測: {post.get('engagement_prediction', 0):.1f}")
                st.write(f"🔄 リトライ: {int(post.get('retry_count', 0))}回")
            
            with col3:
                st.write("**メタデータ**")
                st.write(f"🏷️ ハッシュタグ: {post.get('hashtags', 'N/A')}")
                st.write(f"🎭 パターン: {pattern}")
                st.write(f"📱 ソース: {source}")

def show_performance_analysis(df: pd.DataFrame, stats: Dict):
    """パフォーマンス分析表示"""
    st.header("📊 パフォーマンス分析")
    
    # パターン別分析
    if not stats['pattern_stats'].empty:
        st.subheader("🎯 パターン別エンゲージメント")
        
        pattern_df = stats['pattern_stats']
        
        fig = px.bar(
            pattern_df,
            x='pattern_type',
            y='actual_engagement',
            title="投稿パターン別平均エンゲージメント"
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # パターン別詳細統計
        st.dataframe(pattern_df)
    
    # 時間帯別分析
    if 'scheduled_time' in df.columns and not df['scheduled_time'].isna().all():
        st.subheader("⏰ 時間帯別分析")
        
        df_time = df.copy()
        df_time['hour'] = df_time['scheduled_time'].dt.hour
        
        hourly_stats = df_time.groupby('hour').agg({
            'actual_engagement': 'mean',
            'clicks': 'sum',
            'likes': 'sum'
        }).reset_index()
        
        fig = go.Figure()
        
        fig.add_trace(go.Scatter(
            x=hourly_stats['hour'],
            y=hourly_stats['actual_engagement'],
            name='平均エンゲージメント',
            line=dict(color='blue')
        ))
        
        fig.add_trace(go.Scatter(
            x=hourly_stats['hour'],
            y=hourly_stats['likes'],
            name='いいね数',
            yaxis='y2',
            line=dict(color='red')
        ))
        
        fig.update_layout(
            title="時間帯別パフォーマンス",
            xaxis_title="時間",
            yaxis_title="エンゲージメント",
            yaxis2=dict(title="いいね数", overlaying='y', side='right')
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # 基本統計
    st.subheader("📊 基本統計サマリー")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.json({
            "総投稿数": stats['total_posts'],
            "投稿済み": stats['posted_count'],
            "予定": stats['pending_count'],
            "失敗": stats['failed_count']
        })
    
    with col2:
        st.json({
            "平均エンゲージメント": round(stats['avg_engagement'], 2),
            "総いいね": stats['total_likes'],
            "総クリック": stats['total_clicks'],
            "総コメント": stats['total_comments']
        })

def show_system_status(dashboard: FinalThreadsDashboard):
    """システム状況表示"""
    st.header("🔧 システム状況")
    
    st.subheader("💾 データベース状況")
    
    for db_path, config in dashboard.db_configs.items():
        st.write(f"**{db_path}**")
        
        if os.path.exists(db_path):
            try:
                conn = sqlite3.connect(db_path)
                
                # テーブル一覧
                tables_df = pd.read_sql_query(
                    "SELECT name FROM sqlite_master WHERE type='table'",
                    conn
                )
                
                st.success(f"✅ 接続OK - テーブル: {list(tables_df['name'])}")
                
                # レコード数確認
                if config['table'] in tables_df['name'].values:
                    count_df = pd.read_sql_query(f"SELECT COUNT(*) as count FROM {config['table']}", conn)
                    st.info(f"📊 {config['table']}: {count_df['count'].iloc[0]}件")
                else:
                    st.warning(f"⚠️ テーブル {config['table']} が見つかりません")
                
                conn.close()
                
            except Exception as e:
                st.error(f"❌ エラー: {e}")
        else:
            st.error(f"❌ ファイルが存在しません")
    
    # システム推奨アクション
    st.subheader("🚀 推奨アクション")
    
    st.markdown("""
    ### 💡 投稿データを増やすには:
    
    **1. 新規投稿生成**
    ```bash
    THREADS_ULTIMATE_START.bat
    ```
    
    **2. 自動投稿セットアップ**
    ```bash
    BUZZ_SETUP.bat
    ```
    
    **3. エンゲージメントデータ更新**
    - 投稿履歴タブで手動更新
    - 実際の反応数を入力
    """)

if __name__ == "__main__":
    main()